{"version":3,"sources":["store/mainApi.ts","store/dataSlice.ts","store/index.ts","assets/No_image_available.svg","components/Community/Community.tsx","components/ErrorDisplay/ErrorDisplay.tsx","components/Spinner/Spinner.tsx","utils/organize_data.ts","components/Communities/Communities.tsx","components/Home/Home.tsx","components/Homes/Homes.tsx","components/SearchAppBar/SearchAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mainApi","createApi","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getCommunities","query","key","getHomes","useGetCommunitiesQuery","useGetHomesQuery","dataSlice","createSlice","name","initialState","dataOrganized","searchKey","homesModal","display","communityId","communityName","reducers","replaceDataOrganized","state","action","payload","replaceSearchKey","trim","replaceHomesModal","dataActions","actions","store","options","configureStore","reducer","reducerPath","data","middleware","getDefaultMiddleware","concat","createStore","useAppDispatch","useDispatch","useTypedSelector","useSelector","Community","props","dispatch","React","useState","loading","image","setImage","avgPrice","community","imgUrl","id","Grid","item","xs","sm","md","lg","className","hidden","Card","Skeleton","variant","height","animation","CardMedia","component","src","onError","event","currentTarget","FALLBACK_IMAGE","style","objectFit","onLoad","CardContent","Typography","gutterBottom","color","CardActions","Button","disabled","size","onClick","ErrorDisplay","communitiesFetch","HomesFetch","error","status","Spinner","CircularProgress","formatter","Intl","NumberFormat","currency","maximumFractionDigits","GetAveragePrice","homes","homesFiltered","filter","home","length","average","map","price","reduce","prev","curr","format","SortByName","a","b","nameA","toUpperCase","nameB","Communities","homesFetch","Container","maxWidth","isLoading","container","columns","justifyContent","sort","includes","Home","margin","index","type","Homes","Dialog","open","onClose","fullWidth","Paper","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","breakpoints","up","spacing","StyledInputBase","InputBase","padding","paddingLeft","transition","transitions","create","SearchAppBar","Box","sx","flexGrow","AppBar","Toolbar","noWrap","placeholder","inputProps","onChange","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5b497434.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { community, home} from '../data_types/data_types'\r\n\r\nexport const mainApi = createApi({\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://kmin2684.github.io/mock-api/oh_fe_test/' }),\r\n  tagTypes: [],\r\n  endpoints: (builder) => ({\r\n    getCommunities: builder.query<community[], string>({\r\n      query: (key) => `communities.json`,\r\n    }),\r\n    getHomes: builder.query<home[], string>({\r\n      query: (key) => 'homes.json',\r\n    }),\r\n  }),\r\n})\r\n\r\n// Export hooks for usage in functional components\r\nexport const { useGetCommunitiesQuery,useGetHomesQuery } = mainApi","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport interface dataOrganizedType {\r\n    name: string\r\n    imgUrl: string\r\n    avgPrice: string\r\n}\r\n\r\nexport interface homesModalType {\r\n  display: boolean\r\n  communityId:string\r\n  communityName: string\r\n}\r\n\r\nconst initialState: {dataOrganized: dataOrganizedType[], searchKey: string, homesModal: homesModalType} = {\r\n  dataOrganized: [], \r\n  searchKey: '',\r\n  homesModal: {display: false, communityId: '', communityName: ''},\r\n};\r\n\r\n\r\nconst dataSlice = createSlice({\r\n  name: \"data\",\r\n  initialState,\r\n  reducers: {\r\n    replaceDataOrganized(state, action: {payload: dataOrganizedType[], type: string}) {\r\n      state.dataOrganized = action.payload;\r\n    },\r\n    replaceSearchKey(state, action: {payload: string, type: string}) {\r\n      state.searchKey = action.payload.trim()\r\n    },\r\n    replaceHomesModal(state, action: {payload: homesModalType, type: string}) {\r\n      state.homesModal = action.payload\r\n    }\r\n  \r\n  },\r\n});\r\n\r\nexport const dataActions = dataSlice.actions;\r\n\r\nexport default dataSlice.reducer;","import { configureStore, ConfigureStoreOptions } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { mainApi } from './mainApi';\r\nimport data from './dataSlice'\r\n\r\n\r\nexport const createStore = (options?: ConfigureStoreOptions['preloadedState'] | undefined) =>\r\n  configureStore({\r\n    reducer: {\r\n      [mainApi.reducerPath]: mainApi.reducer,\r\n      data,\r\n    },\r\n    middleware: (getDefaultMiddleware) =>\r\n      getDefaultMiddleware().concat(mainApi.middleware),\r\n    ...options,\r\n  });\r\n\r\nexport const store = createStore();\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","export default __webpack_public_path__ + \"static/media/No_image_available.1edd6fd3.svg\";","import React from 'react';\r\nimport \"./Community.css\";\r\nimport { useAppDispatch } from '../../store';\r\nimport { dataActions } from '../../store/dataSlice';\r\nimport FALLBACK_IMAGE from '../../assets/No_image_available.svg';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Skeleton, Grid } from '@mui/material';\r\n\r\n\r\ninterface propType {\r\n  community: {avgPrice: string, imgUrl: string, name: string, id: string}\r\n  hidden: boolean\r\n};\r\n\r\nexport default function Community(props: propType) {\r\n\r\n  const dispatch = useAppDispatch(); \r\n\r\n  const [image, setImage] = React.useState({loading: true})\r\n  const avgPrice = props.community.avgPrice;\r\n  const imgUrl = props.community.imgUrl;\r\n  const name = props.community.name;\r\n  const communityId = props.community.id; \r\n\r\n\r\n  const onMediaFallback = (event: React.SyntheticEvent<HTMLImageElement, Event>) => {\r\n    event.currentTarget.src = FALLBACK_IMAGE;\r\n    event.currentTarget.style.objectFit = 'contain';\r\n  };\r\n  const onLoad = () => setImage(state => {return {...state, loading: false}});\r\n  const onClick = () => dispatch(dataActions.replaceHomesModal({display: true, communityName: name, communityId}));\r\n\r\n\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3} className = {props.hidden? 'hidden Community' : 'Community'}>\r\n      <Card>\r\n        {image.loading&& \r\n        <Skeleton  variant='rectangular' height={200} animation=\"wave\"/>\r\n        }\r\n        <CardMedia\r\n          component=\"img\"\r\n          height=\"200\"\r\n          src={imgUrl}\r\n          onError = {onMediaFallback}\r\n          onLoad = {onLoad}\r\n          style={{display: image.loading? 'none': 'block'}}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {avgPrice === 'N/A'? ' no home data available' \r\n            : `Average price: ${avgPrice}`}\r\n          </Typography>\r\n        </CardContent>\r\n          <CardActions>\r\n            <Button disabled = {avgPrice === 'N/A'} size=\"small\" onClick={onClick}>\r\n              view homes\r\n            </Button>\r\n          </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}","import { useGetCommunitiesQuery,useGetHomesQuery } from '../../store/mainApi';\r\n\r\nexport default function ErrorDisplay() {\r\n   \r\n    const communitiesFetch = useGetCommunitiesQuery(''); \r\n    const HomesFetch = useGetHomesQuery('');\r\n\r\n    if (communitiesFetch.error) {\r\n        return <>\r\n            {('status' in communitiesFetch.error)&& \r\n                <h1>{communitiesFetch.error.status}</h1>\r\n            }\r\n            <h3>An error occurred while retrieving community data from the server</h3>\r\n        </>;\r\n    }  else if (HomesFetch.error) {\r\n        return <>\r\n            {('status' in HomesFetch.error)&& \r\n                <h1>{HomesFetch.error.status}</h1>\r\n            }\r\n            <h3>An error occurred while retrieving home data from the server</h3>\r\n        </>;\r\n    }\r\n\r\n    return null; \r\n}","import './Spinner.css';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nexport default function Spinner() {\r\n    return (\r\n    <div className = \"Spinner\">\r\n        <CircularProgress size={'5rem'}/>\r\n    </div>\r\n    );\r\n}","import { home } from \"../data_types/data_types\";\r\n\r\nexport const formatter = new Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n  maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n\r\nexport const GetAveragePrice = (communityId: string, homes: home[] ) => {\r\n    let homesFiltered = homes.filter((home: { communityId: string; }) => home.communityId === communityId);\r\n\r\n    if (homesFiltered.length === 0) {\r\n        return 'N/A';\r\n    } \r\n    let sum = homesFiltered.map((item: { price: number; }) => item.price).reduce((prev: number, curr: number) => prev + curr, 0);\r\n    let average = sum/homesFiltered.length;\r\n\r\n    return formatter.format(average);\r\n}\r\n\r\nexport function SortByName (a: {name:string}, b:{name:string}) {\r\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n  \r\n    // names must be equal\r\n    return 0;\r\n  };\r\n","import './Communities.css';\r\nimport {Container, Grid} from '@mui/material';\r\nimport Community from '../Community/Community';\r\nimport ErrorDisplay from '../ErrorDisplay/ErrorDisplay';\r\nimport Spinner from '../Spinner/Spinner'; \r\nimport { useGetCommunitiesQuery,useGetHomesQuery } from '../../store/mainApi';\r\nimport {useTypedSelector} from \"../../store/index\";\r\nimport {GetAveragePrice, SortByName} from \"../../utils/organize_data\";\r\n\r\n\r\nexport default function Communities() {\r\n    const communitiesFetch = useGetCommunitiesQuery('');\r\n    const homesFetch = useGetHomesQuery('');\r\n    const searchKey = useTypedSelector(state => state.data.searchKey);\r\n\r\n    return (\r\n        <div className=\"Communities\">\r\n            <Container maxWidth=\"lg\">\r\n                {(communitiesFetch.error || homesFetch.error) ?\r\n\r\n                <ErrorDisplay />\r\n\r\n                : (communitiesFetch.isLoading || homesFetch.isLoading) ? \r\n\r\n                <Spinner />\r\n\r\n                : (communitiesFetch.data && homesFetch.data) ?\r\n\r\n                <Grid container columns={{ xs: 12, sm: 12, md: 12, lg:12 }} justifyContent=\"flex-start\">\r\n                    {\r\n                        communitiesFetch.data.map((community) => {\r\n                            return {id: community.id, name: community.name, imgUrl: community.imgUrl, avgPrice: GetAveragePrice(community.id, homesFetch.data)}\r\n                        })\r\n                        .sort(SortByName)\r\n                        .map(community => \r\n                        <Community community={community} key={community.name}\r\n                        hidden={!community.name.toUpperCase().includes(searchKey.toUpperCase()) }\r\n                        />\r\n                        )\r\n                    }\r\n                </Grid>\r\n\r\n                : 'no community data is available'\r\n                }\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import { home } from \"../../data_types/data_types\";\r\nimport {Grid} from '@mui/material';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport {formatter} from '../../utils/organize_data';\r\n\r\ninterface propType {\r\n    index: number \r\n    home: home\r\n}\r\n\r\nexport default function Home(props: propType) {\r\n    return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n        <Card style={{margin: '0.5rem'}}>\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                    Home {props.index + 1}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Price: {formatter.format(props.home.price)}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Type: {props.home.type}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    </Grid> \r\n    )\r\n}\r\n\r\n","import \"./Homes.css\"\r\nimport { useTypedSelector, useAppDispatch } from \"../../store\";\r\nimport { dataActions } from \"../../store/dataSlice\";\r\nimport { useGetHomesQuery } from \"../../store/mainApi\";\r\nimport Dialog from '@mui/material/Dialog';\r\nimport { Grid, Paper} from '@mui/material';\r\n\r\nimport Home from \"../Home/Home\";\r\n\r\nexport default function Homes() {\r\n\r\n    const {data} = useGetHomesQuery('');\r\n    const state = useTypedSelector(state => state.data.homesModal);\r\n    const dispatch = useAppDispatch();\r\n\r\n    function onClose() {\r\n        dispatch(dataActions.replaceHomesModal({display: false, communityId: '', communityName: ''}));\r\n    }\r\n\r\n    return ( <>    \r\n    <Dialog className='Homes' open={state.display} onClose={onClose} maxWidth='lg' fullWidth={true} >\r\n        <Paper className=\"title\"> {state.communityName}</Paper>\r\n        <Grid container columns={{ xs: 12, sm: 12, md: 12, lg:12 }} justifyContent=\"flex-start\">     \r\n            {data?.filter(home => home.communityId === state.communityId)?.map((home, index) => {\r\n                return <Home home={home} index={index} key={`home-${index}`}/>;\r\n            })}\r\n        </Grid>\r\n    </Dialog>\r\n    </>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputBase from '@mui/material/InputBase';\r\nimport {useTypedSelector, useAppDispatch} from \"../../store/index\";\r\nimport {dataActions} from \"../../store/dataSlice\";\r\n\r\n\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  marginLeft: 0,\r\n  width: '100%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(1),\r\n    width: 'auto',\r\n  },\r\n}));\r\n\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SearchAppBar() {\r\n  const searchKey = useTypedSelector(state => state.data.searchKey);\r\n  const dispatch = useAppDispatch();\r\n\r\n  function onChange (event: any) {\r\n    dispatch(dataActions.replaceSearchKey(event.target.value.trim()))\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\r\n          >\r\n            openhouse.ai\r\n          </Typography>\r\n          <Search>\r\n            <StyledInputBase\r\n              placeholder=\"Search…\"\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={onChange}\r\n              value={searchKey}\r\n            />\r\n          </Search>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\nimport Communities from './components/Communities/Communities';\nimport Homes from './components/Homes/Homes';\nimport SearchAppBar from './components/SearchAppBar/SearchAppBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchAppBar />\n      <Communities /> \n      <Homes />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/index';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}